name: Test and Build
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    name: Test Python Package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Cache dependencies
      #   id: cache
      #   uses: actions/cache@v4
      #   with:
      #     # Use the most common Python dependency file as cache key
      #     path: ~/.cache/pip
      #     key: ${{ runner.os }}-python-${{ matrix.python-version }}-requirements-${{ hashFiles('**/requirements*.txt') }}
      #     restore-keys: |
      #       ${{ runner.os }}-python-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          # Detect and install dependencies based on file presence
          if [ -f "requirements.txt" ]; then
            echo "Installing dependencies from requirements.txt"
            pip install -r requirements.txt
          elif [ -f "Pipfile" ]; then
            echo "Installing dependencies using Pipfile"
            pip install pipenv
            pipenv install
          elif [ -f "pyproject.toml" ]; then
            echo "Installing dependencies from pyproject.toml (assuming Poetry)"
            pip install poetry
            poetry install
          else
            echo "No dependency file found. Skipping dependency installation."
          fi

      - name: Run tests
        run: |
          if [ -d "tests" ]; then
            echo "Running tests using pytest"
            python -m pytest --cov || python -m pytest
          else
            echo "No tests directory found. Skipping tests."
          fi
